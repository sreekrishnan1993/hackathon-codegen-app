"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/convert/route";
exports.ids = ["app/api/convert/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "async_hooks":
/*!******************************!*\
  !*** external "async_hooks" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("async_hooks");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "console":
/*!**************************!*\
  !*** external "console" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("console");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "diagnostics_channel":
/*!**************************************!*\
  !*** external "diagnostics_channel" ***!
  \**************************************/
/***/ ((module) => {

module.exports = require("diagnostics_channel");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "http2":
/*!************************!*\
  !*** external "http2" ***!
  \************************/
/***/ ((module) => {

module.exports = require("http2");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "node:events":
/*!******************************!*\
  !*** external "node:events" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:events");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:util");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "perf_hooks":
/*!*****************************!*\
  !*** external "perf_hooks" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("perf_hooks");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "stream/web":
/*!*****************************!*\
  !*** external "stream/web" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("stream/web");

/***/ }),

/***/ "string_decoder":
/*!*********************************!*\
  !*** external "string_decoder" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("string_decoder");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "util/types":
/*!*****************************!*\
  !*** external "util/types" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("util/types");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fconvert%2Froute&page=%2Fapi%2Fconvert%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fconvert%2Froute.ts&appDir=C%3A%5CReact%20app%5Chackathon-codegen-app%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CReact%20app%5Chackathon-codegen-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fconvert%2Froute&page=%2Fapi%2Fconvert%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fconvert%2Froute.ts&appDir=C%3A%5CReact%20app%5Chackathon-codegen-app%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CReact%20app%5Chackathon-codegen-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_React_app_hackathon_codegen_app_app_api_convert_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/convert/route.ts */ \"(rsc)/./app/api/convert/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/convert/route\",\n        pathname: \"/api/convert\",\n        filename: \"route\",\n        bundlePath: \"app/api/convert/route\"\n    },\n    resolvedPagePath: \"C:\\\\React app\\\\hackathon-codegen-app\\\\app\\\\api\\\\convert\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_React_app_hackathon_codegen_app_app_api_convert_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/convert/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZjb252ZXJ0JTJGcm91dGUmcGFnZT0lMkZhcGklMkZjb252ZXJ0JTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGY29udmVydCUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDUmVhY3QlMjBhcHAlNUNoYWNrYXRob24tY29kZWdlbi1hcHAlNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUMlM0ElNUNSZWFjdCUyMGFwcCU1Q2hhY2thdGhvbi1jb2RlZ2VuLWFwcCZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNpQjtBQUM5RjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVHQUF1RztBQUMvRztBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzZKOztBQUU3SiIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpZ21hLXRvLXNpdGVjb3JlLWNvbnZlcnRlci8/NGFhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxSZWFjdCBhcHBcXFxcaGFja2F0aG9uLWNvZGVnZW4tYXBwXFxcXGFwcFxcXFxhcGlcXFxcY29udmVydFxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvY29udmVydC9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2NvbnZlcnRcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2NvbnZlcnQvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxSZWFjdCBhcHBcXFxcaGFja2F0aG9uLWNvZGVnZW4tYXBwXFxcXGFwcFxcXFxhcGlcXFxcY29udmVydFxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9jb252ZXJ0L3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCwgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fconvert%2Froute&page=%2Fapi%2Fconvert%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fconvert%2Froute.ts&appDir=C%3A%5CReact%20app%5Chackathon-codegen-app%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CReact%20app%5Chackathon-codegen-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/convert/route.ts":
/*!**********************************!*\
  !*** ./app/api/convert/route.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _app_lib_storage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/app/lib/storage */ \"(rsc)/./app/lib/storage.ts\");\n\n\n\n// Initialize OpenAI client\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_2__.OpenAI({\n    apiKey: process.env.OPENAI_API_KEY\n});\nasync function POST(request) {\n    try {\n        console.log(\"Convert API called\");\n        console.log(\"OPENAI_API_KEY available:\", !!process.env.OPENAI_API_KEY);\n        console.log(\"OPENAI_API_KEY length:\", process.env.OPENAI_API_KEY?.length || 0);\n        console.log(\"BLOB_READ_WRITE_TOKEN available:\", !!process.env.BLOB_READ_WRITE_TOKEN);\n        // Check if OpenAI API key is available\n        if (!process.env.OPENAI_API_KEY) {\n            console.error(\"OPENAI_API_KEY is not set\");\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"OpenAI API key is not configured\"\n            }, {\n                status: 500\n            });\n        }\n        const formData = await request.formData();\n        const figmaUrl = formData.get(\"figmaUrl\");\n        const prompt = formData.get(\"prompt\");\n        const imageFile = formData.get(\"image\");\n        console.log(\"Form data received:\", {\n            hasFigmaUrl: !!figmaUrl,\n            hasPrompt: !!prompt,\n            hasImage: !!imageFile,\n            promptLength: prompt?.length || 0\n        });\n        if (!prompt) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"Prompt is required\"\n            }, {\n                status: 400\n            });\n        }\n        if (!figmaUrl && !imageFile) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"Either Figma URL or image file is required\"\n            }, {\n                status: 400\n            });\n        }\n        let imageContent = \"\";\n        if (imageFile) {\n            try {\n                // Convert the file to base64 directly without writing to disk\n                const bytes = await imageFile.arrayBuffer();\n                const buffer = Buffer.from(bytes);\n                imageContent = buffer.toString(\"base64\");\n                console.log(\"Image processed successfully, size:\", imageContent.length);\n            } catch (error) {\n                console.error(\"Error processing image:\", error);\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                    success: false,\n                    error: \"Error processing image file\"\n                }, {\n                    status: 500\n                });\n            }\n        }\n        // Generate a unique ID for the results\n        const resultId = (0,_app_lib_storage__WEBPACK_IMPORTED_MODULE_1__.generateResultId)();\n        console.log(\"Generated result ID:\", resultId);\n        // Store initial result with empty values\n        try {\n            await (0,_app_lib_storage__WEBPACK_IMPORTED_MODULE_1__.storeResults)(resultId, {\n                html: \"Processing...\",\n                sitecoreFields: \"Processing...\",\n                component: \"Processing...\"\n            });\n            console.log(\"Initial results stored\");\n        } catch (error) {\n            console.error(\"Error storing initial results:\", error);\n        // Continue processing even if initial storage fails\n        }\n        // Process the request synchronously instead of in the background\n        console.log(\"Starting synchronous processing for result ID:\", resultId);\n        // Generate HTML using OpenAI\n        let html = \"Processing...\";\n        let sitecoreFields = \"Processing...\";\n        let component = \"Processing...\";\n        try {\n            console.log(\"Calling OpenAI for HTML generation with prompt:\", prompt.substring(0, 100) + \"...\");\n            // Choose the appropriate model based on whether an image is provided\n            const model = imageContent ? \"gpt-4o\" : \"gpt-4\";\n            console.log(\"Using model:\", model);\n            let htmlCompletion;\n            if (imageContent) {\n                // Format for vision model\n                htmlCompletion = await openai.chat.completions.create({\n                    model: model,\n                    messages: [\n                        {\n                            role: \"user\",\n                            content: [\n                                {\n                                    type: \"text\",\n                                    text: `Generate HTML for this design. ${prompt}${figmaUrl ? ` Figma URL: ${figmaUrl}` : \"\"}`\n                                },\n                                {\n                                    type: \"image_url\",\n                                    image_url: {\n                                        url: `data:image/jpeg;base64,${imageContent}`\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    max_tokens: 2000\n                });\n            } else {\n                // Format for text-only model\n                htmlCompletion = await openai.chat.completions.create({\n                    model: model,\n                    messages: [\n                        {\n                            role: \"user\",\n                            content: `Generate HTML for this design. ${prompt}${figmaUrl ? ` Figma URL: ${figmaUrl}` : \"\"}`\n                        }\n                    ],\n                    max_tokens: 2000\n                });\n            }\n            console.log(\"OpenAI HTML generation completed with response:\", htmlCompletion.choices[0].message.content?.substring(0, 100) + \"...\");\n            html = htmlCompletion.choices[0].message.content || \"Error: Failed to generate HTML\";\n            console.log(\"HTML generated, length:\", html.length);\n            // Update the stored results with HTML\n            try {\n                await (0,_app_lib_storage__WEBPACK_IMPORTED_MODULE_1__.storeResults)(resultId, {\n                    html,\n                    sitecoreFields,\n                    component\n                });\n                console.log(\"Updated results with HTML\");\n            } catch (error) {\n                console.error(\"Error updating results with HTML:\", error);\n            // Continue processing even if storage fails\n            }\n        } catch (error) {\n            console.error(\"Error generating HTML:\", error);\n            if (error instanceof Error) {\n                console.error(\"Error details:\", error.message, error.stack);\n            }\n            html = \"Error: Failed to generate HTML\";\n            try {\n                await (0,_app_lib_storage__WEBPACK_IMPORTED_MODULE_1__.storeResults)(resultId, {\n                    html,\n                    sitecoreFields,\n                    component\n                });\n            } catch (storageError) {\n                console.error(\"Error storing error result:\", storageError);\n            }\n        }\n        try {\n            console.log(\"Calling OpenAI for Sitecore fields generation\");\n            // Generate Sitecore fields\n            console.log(\"Sending request to OpenAI API for Sitecore fields generation\");\n            console.log(\"Using model: gpt-4\");\n            const sitecoreFieldsCompletion = await openai.chat.completions.create({\n                model: \"gpt-4\",\n                messages: [\n                    {\n                        role: \"user\",\n                        content: `Based on this HTML, generate Sitecore field definitions in JSON format. Include field types and descriptions. HTML: ${html}`\n                    }\n                ],\n                max_tokens: 2000\n            });\n            console.log(\"OpenAI Sitecore fields generation completed with response:\", sitecoreFieldsCompletion.choices[0].message.content?.substring(0, 100) + \"...\");\n            sitecoreFields = sitecoreFieldsCompletion.choices[0].message.content || \"Error: Failed to generate Sitecore fields\";\n            console.log(\"Sitecore fields generated, length:\", sitecoreFields.length);\n            // Update the stored results with Sitecore fields\n            try {\n                await (0,_app_lib_storage__WEBPACK_IMPORTED_MODULE_1__.storeResults)(resultId, {\n                    html,\n                    sitecoreFields,\n                    component\n                });\n                console.log(\"Updated results with Sitecore fields\");\n            } catch (error) {\n                console.error(\"Error updating results with Sitecore fields:\", error);\n            // Continue processing even if storage fails\n            }\n        } catch (error) {\n            console.error(\"Error generating Sitecore fields:\", error);\n            if (error instanceof Error) {\n                console.error(\"Error details:\", error.message, error.stack);\n            }\n            sitecoreFields = \"Error: Failed to generate Sitecore fields\";\n            try {\n                await (0,_app_lib_storage__WEBPACK_IMPORTED_MODULE_1__.storeResults)(resultId, {\n                    html,\n                    sitecoreFields,\n                    component\n                });\n            } catch (storageError) {\n                console.error(\"Error storing error result:\", storageError);\n            }\n        }\n        try {\n            console.log(\"Calling OpenAI for component generation\");\n            // Generate NextJS component\n            console.log(\"Sending request to OpenAI API for component generation\");\n            console.log(\"Using model: gpt-4\");\n            const componentCompletion = await openai.chat.completions.create({\n                model: \"gpt-4\",\n                messages: [\n                    {\n                        role: \"user\",\n                        content: `Generate a NextJS component with Sitecore integration based on this HTML and Sitecore fields. HTML: ${html}, Fields: ${sitecoreFields}`\n                    }\n                ],\n                max_tokens: 2000\n            });\n            console.log(\"OpenAI component generation completed with response:\", componentCompletion.choices[0].message.content?.substring(0, 100) + \"...\");\n            component = componentCompletion.choices[0].message.content || \"Error: Failed to generate component\";\n            console.log(\"Component generated, length:\", component.length);\n            // Update the stored results with the component\n            try {\n                await (0,_app_lib_storage__WEBPACK_IMPORTED_MODULE_1__.storeResults)(resultId, {\n                    html,\n                    sitecoreFields,\n                    component\n                });\n                console.log(\"Updated results with component\");\n            } catch (error) {\n                console.error(\"Error updating results with component:\", error);\n            // Continue processing even if storage fails\n            }\n        } catch (error) {\n            console.error(\"Error generating component:\", error);\n            if (error instanceof Error) {\n                console.error(\"Error details:\", error.message, error.stack);\n            }\n            component = \"Error: Failed to generate component\";\n            try {\n                await (0,_app_lib_storage__WEBPACK_IMPORTED_MODULE_1__.storeResults)(resultId, {\n                    html,\n                    sitecoreFields,\n                    component\n                });\n            } catch (storageError) {\n                console.error(\"Error storing error result:\", storageError);\n            }\n        }\n        console.log(\"Processing completed for result ID:\", resultId);\n        // Return the result ID and results\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: true,\n            resultId,\n            results: {\n                html,\n                sitecoreFields,\n                component\n            }\n        });\n    } catch (error) {\n        console.error(\"Error in convert API:\", error);\n        if (error instanceof Error) {\n            console.error(\"Error details:\", error.message, error.stack);\n        }\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: false,\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/convert/route.ts\n");

/***/ }),

/***/ "(rsc)/./app/lib/storage.ts":
/*!****************************!*\
  !*** ./app/lib/storage.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cleanupOldResults: () => (/* binding */ cleanupOldResults),\n/* harmony export */   generateResultId: () => (/* binding */ generateResultId),\n/* harmony export */   getResults: () => (/* binding */ getResults),\n/* harmony export */   listResults: () => (/* binding */ listResults),\n/* harmony export */   storeResults: () => (/* binding */ storeResults)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm/v4.js\");\n/* harmony import */ var _vercel_blob__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @vercel/blob */ \"(rsc)/./node_modules/@vercel/blob/dist/index.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n\n// Generate a unique ID for each result set\nfunction generateResultId() {\n    const id = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n    console.log(\"Generated result ID:\", id);\n    return id;\n}\n// Store results with the given ID\nasync function storeResults(id, results) {\n    try {\n        console.log(\"Storing results for ID:\", id);\n        console.log(\"Results to store:\", {\n            htmlLength: results.html.length,\n            sitecoreFieldsLength: results.sitecoreFields.length,\n            componentLength: results.component.length\n        });\n        const data = {\n            ...results,\n            timestamp: Date.now()\n        };\n        // Check if BLOB_READ_WRITE_TOKEN is available\n        const hasBlobToken = !!process.env.BLOB_READ_WRITE_TOKEN;\n        console.log(\"BLOB_READ_WRITE_TOKEN available:\", hasBlobToken);\n        if (hasBlobToken) {\n            // Store the results in Vercel Blob\n            console.log(\"Storing data in Vercel Blob\");\n            const blob = await (0,_vercel_blob__WEBPACK_IMPORTED_MODULE_3__.put)(`results/${id}.json`, JSON.stringify(data), {\n                access: \"public\",\n                addRandomSuffix: false\n            });\n            console.log(`Stored results with ID: ${id} at URL: ${blob.url}`);\n        } else {\n            // Use local file storage for development\n            console.log(\"Using local file storage for development\");\n            // Ensure the storage directory exists\n            const storageDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"storage\");\n            if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(storageDir)) {\n                fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(storageDir, {\n                    recursive: true\n                });\n            }\n            // Write the results to a file\n            const filePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(storageDir, `${id}.json`);\n            fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(filePath, JSON.stringify(data));\n            console.log(`Stored results with ID: ${id} at local path: ${filePath}`);\n        }\n    } catch (error) {\n        console.error(\"Error storing results:\", error);\n        if (error instanceof Error) {\n            console.error(\"Error details:\", error.message, error.stack);\n        }\n        throw error // Propagate the error to handle it in the API route\n        ;\n    }\n}\n// Get results by ID\nasync function getResults(id) {\n    try {\n        console.log(\"Getting results for ID:\", id);\n        // Check if BLOB_READ_WRITE_TOKEN is available\n        const hasBlobToken = !!process.env.BLOB_READ_WRITE_TOKEN;\n        console.log(\"BLOB_READ_WRITE_TOKEN available:\", hasBlobToken);\n        if (hasBlobToken) {\n            // Get the results from Vercel Blob\n            console.log(\"Listing blobs with prefix:\", `results/${id}.json`);\n            const { blobs } = await (0,_vercel_blob__WEBPACK_IMPORTED_MODULE_3__.list)({\n                prefix: `results/${id}.json`\n            });\n            console.log(\"Blobs found:\", blobs.length);\n            if (!blobs || blobs.length === 0) {\n                console.log(\"No blobs found for ID:\", id);\n                return null;\n            }\n            console.log(\"Fetching blob from URL:\", blobs[0].url);\n            const response = await fetch(blobs[0].url);\n            if (!response.ok) {\n                console.error(\"Error fetching blob:\", response.status, response.statusText);\n                return null;\n            }\n            const result = await response.json();\n            // Check if the result has expired (older than 1 hour)\n            const oneHourAgo = Date.now() - 60 * 60 * 1000;\n            if (result.timestamp < oneHourAgo) {\n                console.log(\"Result expired, deleting blob\");\n                await (0,_vercel_blob__WEBPACK_IMPORTED_MODULE_3__.del)(blobs[0].url);\n                return null;\n            }\n            console.log(\"Result retrieved successfully:\", {\n                htmlLength: result.html.length,\n                sitecoreFieldsLength: result.sitecoreFields.length,\n                componentLength: result.component.length,\n                timestamp: new Date(result.timestamp).toISOString()\n            });\n            return result;\n        } else {\n            // Use local file storage for development\n            console.log(\"Using local file storage for development\");\n            const storageDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"storage\");\n            const filePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(storageDir, `${id}.json`);\n            if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(filePath)) {\n                console.log(\"No file found for ID:\", id);\n                return null;\n            }\n            const fileContent = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(filePath, \"utf-8\");\n            const result = JSON.parse(fileContent);\n            // Check if the result has expired (older than 1 hour)\n            const oneHourAgo = Date.now() - 60 * 60 * 1000;\n            if (result.timestamp < oneHourAgo) {\n                console.log(\"Result expired, deleting file\");\n                fs__WEBPACK_IMPORTED_MODULE_0___default().unlinkSync(filePath);\n                return null;\n            }\n            console.log(\"Result retrieved successfully:\", {\n                htmlLength: result.html.length,\n                sitecoreFieldsLength: result.sitecoreFields.length,\n                componentLength: result.component.length,\n                timestamp: new Date(result.timestamp).toISOString()\n            });\n            return result;\n        }\n    } catch (error) {\n        console.error(\"Error retrieving results:\", error);\n        if (error instanceof Error) {\n            console.error(\"Error details:\", error.message, error.stack);\n        }\n        return null;\n    }\n}\n// Clean up old results (older than 1 hour)\nasync function cleanupOldResults() {\n    try {\n        console.log(\"Starting cleanup of old results\");\n        const oneHourAgo = Date.now() - 60 * 60 * 1000;\n        // Check if BLOB_READ_WRITE_TOKEN is available\n        console.log(\"BLOB_READ_WRITE_TOKEN available:\", !!process.env.BLOB_READ_WRITE_TOKEN);\n        // List all results\n        console.log(\"Listing all blobs with prefix: results/\");\n        const { blobs } = await (0,_vercel_blob__WEBPACK_IMPORTED_MODULE_3__.list)({\n            prefix: \"results/\"\n        });\n        console.log(\"Total blobs found:\", blobs.length);\n        // Delete expired results\n        let deletedCount = 0;\n        for (const blob of blobs){\n            try {\n                console.log(\"Fetching blob from URL:\", blob.url);\n                const response = await fetch(blob.url);\n                if (!response.ok) {\n                    console.error(\"Error fetching blob:\", response.status, response.statusText);\n                    continue;\n                }\n                const result = await response.json();\n                if (result.timestamp < oneHourAgo) {\n                    console.log(\"Deleting expired blob:\", blob.url);\n                    await (0,_vercel_blob__WEBPACK_IMPORTED_MODULE_3__.del)(blob.url);\n                    deletedCount++;\n                }\n            } catch (error) {\n                console.error(\"Error processing blob during cleanup:\", error);\n                if (error instanceof Error) {\n                    console.error(\"Error details:\", error.message, error.stack);\n                }\n            }\n        }\n        console.log(`Cleanup completed. Deleted ${deletedCount} expired results.`);\n    } catch (error) {\n        console.error(\"Error cleaning up results:\", error);\n        if (error instanceof Error) {\n            console.error(\"Error details:\", error.message, error.stack);\n        }\n    }\n}\n// Run cleanup on startup\ncleanupOldResults();\n// List all results\nasync function listResults() {\n    try {\n        console.log(\"Listing all results\");\n        // Check if BLOB_READ_WRITE_TOKEN is available\n        const hasBlobToken = !!process.env.BLOB_READ_WRITE_TOKEN;\n        console.log(\"BLOB_READ_WRITE_TOKEN available:\", hasBlobToken);\n        if (hasBlobToken) {\n            // Get the results from Vercel Blob\n            console.log(\"Listing blobs with prefix:\", \"results/\");\n            const { blobs } = await (0,_vercel_blob__WEBPACK_IMPORTED_MODULE_3__.list)({\n                prefix: \"results/\"\n            });\n            console.log(\"Blobs found:\", blobs.length);\n            if (!blobs || blobs.length === 0) {\n                console.log(\"No blobs found\");\n                return [];\n            }\n            // Extract IDs from blob URLs\n            const results = blobs.map((blob)=>{\n                const id = blob.url.split(\"/\").pop()?.replace(\".json\", \"\") || \"\";\n                return {\n                    id,\n                    timestamp: blob.uploadedAt.getTime()\n                };\n            });\n            console.log(\"Results retrieved successfully:\", results.length);\n            return results;\n        } else {\n            // Use local file storage for development\n            console.log(\"Using local file storage for development\");\n            const storageDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"storage\");\n            if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(storageDir)) {\n                console.log(\"Storage directory not found\");\n                return [];\n            }\n            const files = fs__WEBPACK_IMPORTED_MODULE_0___default().readdirSync(storageDir);\n            console.log(\"Files found:\", files.length);\n            // Extract IDs from filenames\n            const results = files.filter((file)=>file.endsWith(\".json\")).map((file)=>{\n                const id = file.replace(\".json\", \"\");\n                const filePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(storageDir, file);\n                const stats = fs__WEBPACK_IMPORTED_MODULE_0___default().statSync(filePath);\n                return {\n                    id,\n                    timestamp: stats.mtimeMs\n                };\n            });\n            console.log(\"Results retrieved successfully:\", results.length);\n            return results;\n        }\n    } catch (error) {\n        console.error(\"Error listing results:\", error);\n        if (error instanceof Error) {\n            console.error(\"Error details:\", error.message, error.stack);\n        }\n        return [];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/lib/storage.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/undici","vendor-chunks/@fastify","vendor-chunks/@vercel","vendor-chunks/formdata-node","vendor-chunks/retry","vendor-chunks/uuid","vendor-chunks/async-retry","vendor-chunks/throttleit","vendor-chunks/is-node-process","vendor-chunks/is-buffer","vendor-chunks/openai","vendor-chunks/form-data-encoder","vendor-chunks/whatwg-url","vendor-chunks/agentkeepalive","vendor-chunks/tr46","vendor-chunks/web-streams-polyfill","vendor-chunks/node-fetch","vendor-chunks/webidl-conversions","vendor-chunks/ms","vendor-chunks/humanize-ms","vendor-chunks/event-target-shim","vendor-chunks/abort-controller"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fconvert%2Froute&page=%2Fapi%2Fconvert%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fconvert%2Froute.ts&appDir=C%3A%5CReact%20app%5Chackathon-codegen-app%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CReact%20app%5Chackathon-codegen-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();